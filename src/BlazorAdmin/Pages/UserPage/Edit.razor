@inject ILogger<Edit> Logger
@inject IJSRuntime JSRuntime
@inject IUserManagementService UserManagementService

@inherits BlazorAdmin.Helpers.BlazorComponent

@namespace BlazorAdmin.Pages.UserPage
@using BlazorAdmin.Interfaces
@using BlazorAdmin.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.eShopWeb.Infrastructure.Identity

<div class="modal @_modalClass" tabindex="-1" role="dialog" style="display:@_modalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            @if (_item == null)
            {
                <Spinner></Spinner>
            }
            else
            {
                <EditForm Model="_item.User" OnValidSubmit="@SaveClick">
                    <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Edit @_item.User.UserName</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                        <div class="container">
                            <div class="row">
                                <div class="col-md-12">
                                    <!-- User Information -->
                                    <div class="form-group row">
                                        <label for="UserName" class="control-label col-md-6">Username</label>
                                        <div class="col-md-6">
                                            <InputText id="UserName" class="form-control" @bind-Value="_item.User.UserName" />
                                            <ValidationMessage For="@(() => _item.User.UserName)" class="text-danger" />
                                        </div>
                                    </div>

                                    <div class="form-group row">
                                        <label for="Email" class="control-label col-md-6">Email</label>
                                        <div class="col-md-6">
                                            <InputText id="Email" class="form-control" @bind-Value="_item.User.Email" />
                                            <ValidationMessage For="@(() => _item.User.Email)" class="text-danger" />
                                        </div>
                                    </div>

                                    <div class="form-group row">
                                        <label for="PhoneNumber" class="control-label col-md-6">Phone Number</label>
                                        <div class="col-md-6">
                                            <InputText id="PhoneNumber" class="form-control" @bind-Value="_item.User.PhoneNumber" />
                                            <ValidationMessage For="@(() => _item.User.PhoneNumber)" class="text-danger" />
                                        </div>
                                    </div>

                                    <div class="form-group row form-check">
                                        <div class="col-md-6">
                                            <InputCheckbox id="EmailConfirmed" class="form-check-input" @bind-Value="_item.User.EmailConfirmed" />
                                            <label for="EmailConfirmed" class="form-check-label">Email Confirmed</label>
                                        </div>
                                    </div>

                                    <div class="form-group row form-check">
                                        <div class="col-md-6">
                                            <InputCheckbox id="TwoFactorEnabled" class="form-check-input" @bind-Value="_item.User.TwoFactorEnabled" />
                                            <label for="TwoFactorEnabled" class="form-check-label">Two-Factor Authentication Enabled</label>
                                        </div>
                                    </div>

                                    <div class="form-group row">
                                        <label for="LockoutEnd" class="control-label col-md-6">Lockout Until</label>
                                        <div class="col-md-6">
                                            <InputDate id="LockoutEnd" class="form-control" @bind-Value="_item.User.LockoutEnd" />
                                            <ValidationMessage For="@(() => _item.User.LockoutEnd)" class="text-danger" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        Save
                    </button>
                </div>
            </EditForm>
            }
        </div>
    </div>
</div>



@if (_showEditModal)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public EventCallback<string> OnSaveClick { get; set; }

    private string _modalDisplay = "none;";
    private string _modalClass = "";
    private bool _showEditModal = false;
    private GetUserResponse _item = new GetUserResponse();

    private async Task SaveClick()
    {
        await UserManagementService.Edit(_item);

        Logger.LogInformation($"Updated User Id: {_item.User.Id} with name {_item.User.UserName}");
        await OnSaveClick.InvokeAsync(null);
        await Close();
    }

    public async Task Open(string id)
    {
        Logger.LogInformation("Now loading... /Users/Edit/{Id}", id);

        await new Css(JSRuntime).HideBodyOverflow();

        _item = await UserManagementService.GetById(id);

        Logger.LogInformation($"Acquired user {_item.User.Id} - {_item.User.UserName}");

        _modalDisplay = "block;";
        _modalClass = "Show";
        _showEditModal = true;

        StateHasChanged();
    }

    private async Task Close()
    {
        await new Css(JSRuntime).ShowBodyOverflow();

        _modalDisplay = "none";
        _modalClass = "";
        _showEditModal = false;
    }
}
